---
import "@/styles/global.css";
import Header from "@/components/Header/Header.astro";
import Footer from "@/components/Footer/Footer.astro";
import { urlFromBase } from "@lib/utils";

import { frontmatter as Selfie } from "#/selfie.md";

const { pageTitle } = Astro.props;
const base = import.meta.env.BASE_URL;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href={Selfie.favicon} />
    <link
      rel="preload"
      href={urlFromBase(base, "/fonts/HackDejavu.woff2")}
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href={urlFromBase(base, "/fonts/HackDejavuBold.woff2")}
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href={urlFromBase(base, "/fonts/HackDejavuItalic.woff2")}
      as="font"
      type="font/woff2"
      crossorigin
    />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>{pageTitle}</title>
    <script is:inline>
      function init() {
        preloadTheme();

        const lightThemeButton = document.getElementById("light-theme-button");
        lightThemeButton?.addEventListener("click", () => {
          localStorage.setItem("theme", "light");
          toggleTheme(false);
        });

        const darkThemeButton = document.getElementById("dark-theme-button");
        darkThemeButton?.addEventListener("click", () => {
          localStorage.setItem("theme", "dark");
          toggleTheme(true);
        });

        const systemThemeButton = document.getElementById(
          "system-theme-button",
        );

        systemThemeButton?.addEventListener("click", () => {
          localStorage.setItem("theme", "system");
          toggleTheme(
            window.matchMedia("(prefers-color-scheme: dark)").matches,
          );
        });

        window
          .matchMedia("(prefers-color-scheme: dark)")
          .addEventListener("change", (event) => {
            if (localStorage.theme === "system") {
              toggleTheme(event.matches);
            }
          });
      }

      function toggleTheme(dark) {
        const css = document.createElement("style");

        css.appendChild(
          document.createTextNode(
            `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `,
          ),
        );

        document.head.appendChild(css);

        if (dark) {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }

        window.getComputedStyle(css).opacity;
        document.head.removeChild(css);
      }

      function preloadTheme() {
        const userTheme = localStorage.theme;

        if (userTheme === "light" || userTheme === "dark") {
          toggleTheme(userTheme === "dark");
        } else {
          toggleTheme(
            window.matchMedia("(prefers-color-scheme: dark)").matches,
          );
        }
      }

      document.addEventListener("DOMContentLoaded", () => init());
      document.addEventListener("astro:after-swap", () => init());
      preloadTheme();
    </script>
    <script>
      let ctx: NodeJS.Timeout;
      const sbox = document.getElementById("search") as HTMLInputElement;

      if (sbox !== null) {
        const posts = JSON.parse(sbox.dataset.posts ?? "");
        sbox?.addEventListener("input", () => {
          clearTimeout(ctx);
          const eles = document.getElementsByClassName("nobloger-animate");
          for (let ele of eles) {
            ele.classList.add("opacity-0");
          }

          ctx = setTimeout(async () => {
            for (let ele of eles) {
              (ele as HTMLElement).style.removeProperty("display");
            }
            const matches = findMatch(sbox.value, posts);
            for (let ele of eles) {
              const hide =
                matches.filter((match: any) =>
                  ((ele as any).href ?? match.url).includes(match.url),
                ).length === 0;
              if (hide) (ele as HTMLElement).style.display = "none";
            }
            animation();
          }, 500);
        });
      }

      function findMatch(text: string, posts: any) {
        const match = posts.filter((post: any) =>
          post.frontmatter.title.toLowerCase().includes(text.toLowerCase()),
        );
        return match;
      }

      async function animation() {
        const eles = document.getElementsByClassName("nobloger-animate");
        for (let ele of eles) {
          setTimeout(() => {
            ele?.classList.remove("opacity-0");
            let _ = (ele as any).href
              ? undefined
              : ele.classList.remove("nobloger-animate");
          }, 300); // fade in
          await new Promise((r) => setTimeout(r, 75));
        }
      }

      await animation();
    </script>
  </head>
  <body>
    <div class="flex flex-col mx-auto px-8 max-w-screen-md w-full min-h-screen">
      <Header />
      <div class="grow mt-32">
        <slot />
      </div>
      <Footer />
    </div>
  </body>
</html>
